/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.poisonedyouth

import org.gradle.api.DefaultTask
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.TaskAction
import java.nio.file.Files

private val defaultFileTypes: List<String> = listOf("kt")
private val defaultReportFilePath: String = "build/reports/countLines.txt"

class GradleCustomPlugin : Plugin<Project> {
    override fun apply(project: Project) {
        // Register a task
        project.tasks.create("printReportToTerminal", PrintReportToTerminalTask::class.java)
        project.tasks.create("printReportToFile", PrintReportToFileTask::class.java)
    }
}

abstract class CountLinesTask : DefaultTask() {
    @Input
    var fileTypes: List<String> = defaultFileTypes

    protected fun countLines(): Map<String, Int> {
        println("Start producing count lines report...")
        val result = mutableMapOf<String, Int>()
        val projectRootDir = project.projectDir
        println("Root directory: $projectRootDir")
        projectRootDir.walk()
            .filter { it.isFile && it.extension in fileTypes }
            .forEach {
                val lineCount = Files.readAllLines(it.toPath()).count()
                val existingCount = result[it.extension]
                if (existingCount == null) {
                    result[it.extension] = lineCount
                } else {
                    result.replace(it.extension, existingCount + lineCount)
                }

            }
        return result.toMap()
    }

    protected fun printReport(result: Map<String, Int>): String {
        return result.map { "Filetype:${it.key} \t-\t Lines:${it.value}" }.joinToString("\n")
    }

}

open class PrintReportToTerminalTask : CountLinesTask() {

    @TaskAction
    fun printReportToTerminal() {
        println(printReport(countLines()))
    }
}

open class PrintReportToFileTask : CountLinesTask() {

    @Input
    var reportFilePath: String = defaultReportFilePath

    @TaskAction
    fun printReportToFile() {
        val projectRootDir = project.projectDir
        val reportFile = projectRootDir.toPath().resolve(reportFilePath)
        Files.createDirectories(reportFile.parent)
        Files.writeString(reportFile, printReport(countLines()))
        println("Finished producing count lines report in path: $reportFilePath")
    }
}